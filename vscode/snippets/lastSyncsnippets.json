{"ref":"0fc79e55-1b73-4464-99e6-6bb5966bf43b","syncData":{"version":1,"machineId":"e153674e-65fa-4dbd-a0ca-73c0b5212e04","content":"{\"javascriptreact.json\":\"{\\n\\t// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n    \\\"stles\\\": {\\n        \\\"prefix\\\": \\\"stles\\\",\\n        \\\"body\\\": [\\n            \\\"import { StyleSheet } from 'react-native';\\\",\\n            \\\"export const Styles = StyleSheet.create({\\\",\\n            \\\"\\\\t\\\",\\n            \\\"});\\\",\\n            \\\"\\\"\\n        ],\\n        \\\"description\\\": \\\"Create styles for react native\\\"\\n    }\\n}\",\"javascript.json\":\"{\\n\\t// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"stles\\\": {\\n        \\\"prefix\\\": \\\"stles\\\",\\n        \\\"body\\\": [\\n            \\\"import { StyleSheet } from 'react-native';\\\",\\n            \\\"export const Styles = StyleSheet.create({\\\",\\n            \\\"\\\\t\\\",\\n            \\\"});\\\",\\n            \\\"\\\"\\n        ],\\n        \\\"description\\\": \\\"Create styles for react native\\\"\\n    }\\n}\",\"dart.json\":\"{\\n  // Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and\\n  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n  // same ids are connected.\\n  // Example:\\n  // \\\"Print to console\\\": {\\n  // \\t\\\"prefix\\\": \\\"log\\\",\\n  // \\t\\\"body\\\": [\\n  // \\t\\t\\\"console.log('$1');\\\",\\n  // \\t\\t\\\"$2\\\"\\n  // \\t],\\n  // \\t\\\"description\\\": \\\"Log output to console\\\"\\n  // }\\n  \\\"A new Flutter Screen with a Scaffold\\\": {\\n    \\\"prefix\\\": \\\"fl-screen\\\",\\n    \\\"body\\\": [\\n      \\\"import 'package:flutter/material.dart';\\\",\\n      \\\"\\\",\\n      \\\"class ${1:Home}Screen extends StatelessWidget {\\\",\\n      \\\"   \\\",\\n      \\\"  const ${1:Home}Screen({Key? key}) : super(key: key);\\\",\\n      \\\"  \\\",\\n      \\\"  @override\\\",\\n      \\\"  Widget build(BuildContext context) {\\\",\\n      \\\"    return const Scaffold(\\\",\\n      \\\"      body: Center(\\\",\\n      \\\"         child: Text('${1:Home}Screen'),\\\",\\n      \\\"      ),\\\",\\n      \\\"    );\\\",\\n      \\\"  }\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Crea una pantalla con un Scaffold\\\"\\n  },\\n\\n  \\\"Color scheme\\\": {\\n    \\\"prefix\\\": \\\"theme-of-context\\\",\\n    \\\"body\\\": [\\\"final colors = Theme.of(context).colorScheme;\\\"],\\n    \\\"description\\\": \\\"Create the reference to the colors\\\"\\n  }\\n}\\n\",\"typescript.json\":\"{\\n\\t// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"global.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\"}"}}